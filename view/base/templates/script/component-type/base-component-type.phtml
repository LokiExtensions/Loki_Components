<?php declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Loki\Components\Config\Config;
use Loki\Components\Factory\ViewModelFactory;
use Loki\Components\Util\ComponentUtil;

/** @version 2.2.17 */
/** @var Template $block */
/** @var Escaper $escaper */
/** @var ViewModelFactory $viewModelFactory */
/** @var Config $config */
/** @var ComponentUtil $componentUtil */
$config = $viewModelFactory->create(Config::class);
$componentUtil = $viewModelFactory->create(ComponentUtil::class);
?>
<script>
    const LokiComponentFormKey = '<?= $escaper->escapeJs(
        $componentUtil->getFormKey()
    ) ?>';
    const LokiComponentType = {
        ...LokiLoadDataComponentPartial,
        ...LokiLoadInitMethodsComponentPartial,
        ...LokiLoadDestroyMethodsComponentPartial,
        ...LokiLoaderComponentPartial,
        id: '',
        name: '',
        elementId: '',
        blockId: '',
        cssClass: '',
        targets: [],
        messages: [],
        messageArea: 'local',
        value: null,
        visible: false,
        lazyLoad: false,
        ajax: false,
        beforePostValue: null,
        autofillListenerTimer: null,
        showLoaderTimerId: null,
        async init() {
            this.loadData();
            this.loadInitMethods();
        },
        initComponentRegistration() {
            Alpine.store('LokiComponents').add(this);
        },
        initLazyLoading() {
            if (this.lazyLoad) {
                this.post({});
            }
        },
        async post(value) {
            if (value instanceof Event) {
                value = null;
            }

            if (!value) {
                value = this.value;
            }

            this.loading = true;
            this.setTargetStateOnPost();
            this.beforePostValue = this.value;

            this.showLoaderTimerId = setTimeout(() => {
                this.showLoader = true;
            }, this.showLoaderTimeout);

            return LokiAjaxQueue.add(this, value);
        },
        afterPostSuccess() {
            if (!this.valid) {
                this.value = this.beforePostValue;
            }

            this.$nextTick(() => {
                document.dispatchEvent(new CustomEvent('loki-components.component.update', {
                    detail: {
                        component: this
                    }
                }));
            });
        },
        afterPostFinally() {
            this.$nextTick(() => {
                this.setTargetStateAfterPost();
            });

            this.loading = false;
            this.showLoader = false;
            clearTimeout(this.showLoaderTimerId);
        },
        setTargetStateOnPost() {
            this.targets.forEach(target => {
                this.setLoadingStateToElement(target, true);
            });
        },
        setTargetStateAfterPost() {
            this.targets.forEach(target => {
                this.setLoadingStateToElement(target, false);
            });
        },
        setValue(event) {
            this.value = event.target.value;
        },
        notLoading() {
            return !this.loading;
        },
        getDetailsString() {
            console.log(this.elementId, this.getDetails());
            return JSON.stringify(this.getDetails());
        },
        getDetails() {
            return {
                value: this.value,
                visible: this.visible,
                valid: this.valid,
            };
        },
        addGlobalSuccess(messageText) {
            this.addGlobalMessage('success', messageText);
        },
        addGlobalNotice(messageText) {
            this.addGlobalMessage('notice', messageText);
        },
        addGlobalWarning(messageText) {
            this.addGlobalMessage('warning', messageText);
        },
        addGlobalError(messageText) {
            this.addGlobalMessage('error', messageText);
        },
        addGlobalMessage(messageType, messageText) {
            Alpine.store('LokiMessageStore').addMessage(messageType, messageText);
        },
        addLocalSuccess(messageText) {
            this.addLocalMessage('success', messageText);
        },
        addLocalNotice(messageText) {
            this.addLocalMessage('notice', messageText);
        },
        addLocalWarning(messageText) {
            this.addLocalMessage('warning', messageText);
        },
        addLocalError(messageText) {
            this.addLocalMessage('error', messageText);
        },
        addLocalMessage(messageType, messageText) {
            this.messages.push({type: messageType, text: messageText});
        },
        addMessage(messageType, messageText) {
            if (this.messageArea === 'global') {
                return this.addGlobalMessage(messageType, messageText);
            }

            return this.addLocalMessage(messageType, messageText);
        },
        addError(messageText) {
            this.addMessage('error', messageText);
        },
        hasLocalMessages() {
            return this.messages.length > 0;
        },
        destroy() {
            this.loadDestroyMethods();
        },
        destroyAutofillListener() {
            clearInterval(this.autofillListenerTimer);
        }
    }
</script>
